{"ast":null,"code":"var _jsxFileName = \"/Users/heather/Development/code/eikona/frontend/src/containers/MessagesContainer.js\";\nimport MessageCard from '../components/MessageCard';\nimport React from 'react';\nimport MessageForm from '../components/MessageForm';\nimport { connect } from 'react-redux';\nimport { fetchMessages } from '../actions/messageActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = \"http://localhost:3000/messages\";\n\nclass MessagesContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.addMessage = messageData => {\n      this.setState((prevState, prevProps) => {\n        return {\n          messages: [...prevState.messages, messageData]\n        };\n      });\n    };\n\n    this.increaseMessages = id => {\n      const message = this.state.messages.find(m => id === m.id);\n      const configObj = {\n        method: 'PATCH',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accepts\": \"application/json\"\n        },\n        body: JSON.stringify({\n          messages: message.messages + 1\n        })\n      };\n      fetch(`${url}/${id}`, configObj).then(res => res.json()).then(json => {\n        this.setState(prevState => {\n          const idx = prevState.messages.findIndex(m => json.id === m.id);\n          return {\n            messages: [...prevState.messages.slice(0, idx), json, ...prevState.messages.slice(idx + 1)]\n          };\n        });\n      });\n    };\n  }\n\n  makeMessageCards() {\n    return this.props.messages.map(message => /*#__PURE__*/_jsxDEV(MessageCard, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 49\n    }, this));\n  }\n\n  componentDidMount() {\n    console.log(\"A\");\n    this.props.fetchMessages();\n    console.log(\"D\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"message-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(MessageForm, {\n          addMessage: this.addMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), this.props.loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"LOADING....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 38\n      }, this) : this.makeMessageCards()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMessages: () => dispatch(fetchMessages())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesContainer);","map":{"version":3,"sources":["/Users/heather/Development/code/eikona/frontend/src/containers/MessagesContainer.js"],"names":["MessageCard","React","MessageForm","connect","fetchMessages","url","MessagesContainer","Component","addMessage","messageData","setState","prevState","prevProps","messages","increaseMessages","id","message","state","find","m","configObj","method","headers","body","JSON","stringify","fetch","then","res","json","idx","findIndex","slice","makeMessageCards","props","map","componentDidMount","console","log","render","loading","mapStateToProps","ownProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import MessageCard from '../components/MessageCard'\nimport React from 'react'\nimport MessageForm from '../components/MessageForm'\nimport {connect} from 'react-redux'\nimport {fetchMessages}  from '../actions/messageActions'\n\n\nconst url =\"http://localhost:3000/messages\"\n\nclass MessagesContainer extends React.Component{\n    addMessage = (messageData) => {\n        this.setState((prevState, prevProps ) => {\n            return {\n                messages: [...prevState.messages, messageData]\n            }\n        })\n    }\n\n    makeMessageCards(){\n      return this.props.messages.map(message => <MessageCard message={message} />)\n    }\n    \n    increaseMessages = (id) => {\n      const message = this.state.messages.find((m)=> id === m.id)\n      const configObj = {\n          method: 'PATCH',\n          headers: {\n             \"Content-Type\": \"application/json\",\n             \"Accepts\": \"application/json\"\n          },\n          body: JSON.stringify({messages: message.messages + 1})\n                                }\n    fetch(`${url}/${id}`, configObj)\n      .then(res => res.json())\n      .then(json => {\n         this.setState((prevState) => {\n              const idx = prevState.messages.findIndex((m)=> json.id === m.id)\n\n              return {\n                    messages: [...prevState.messages.slice(0,idx), json, ...prevState.messages.slice(idx + 1)]\n              }\n           })\n       })\n\n    }\n\n    componentDidMount(){\n      console.log(\"A\")\n      this.props.fetchMessages()\n      console.log(\"D\")\n    }\n\n    render(){\n        return(\n            <div id=\"message-container\">\n        \n                <div>\n                    <MessageForm addMessage={this.addMessage}/>\n                    <br></br>\n                </div>\n                \n               {this.props.loading ? <h1>LOADING....</h1> : this.makeMessageCards()}\n               </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n      loading: state.loading\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchMessages: () => dispatch(fetchMessages())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesContainer)\n"]},"metadata":{},"sourceType":"module"}